#include <iostream>
#include <bitset>

using namespace std;

int main()
{
    short int A[6] = { 101, 200, 301, 400, 40970, 600 };
    short int C[6] = { 0, 0, 0, 0, 0, 0 };
    _asm {
        lea esi, A; // Создаем указатель на первый элемент массива А в esi
        lea edi, C; // Создаем указатель на первый элемент массива C в edi
        mov ecx, 6; // Создаем счетчик в еcx

    START:
        mov ax, [esi]; // Копируем значение элемента массива А в ах
        mov bx, [esi]; // Копируем значение элемента массива А в bx
        mov dx, 1000000000000000b; // Сохраняем в dx маску для отбора максимального бита
        and ax, dx; // Умножаем на маску, оставляем в ах = b1000 0000 0000 0000
        shr ax, 15; // Сдвигаем вправо на 15 бит. В ах = 0000 0000 0000 000b1
        mov dx, 1b; // Сохраняем в dx маску для отбора минимального бита
        and bx, dx; // Умножаем на маску, оставляем в bх = 0000 0000 0000 000b1
        mov dx, [esi]; // Копируем значение элемента массива А в dx
        cmp ax, bx; // Сравниваем на равенство значение ax и bх, старший и младший биты
        je NEXT; // Если они равны, то переходим на следующую итерацию
        mov ax, [esi]; // Копируем значение из массива в eax. 
        and ax, 1110000b; // Копируем значение битовых полей 6:4 в eax. Маска: 0000 0000 0111 0000
        shr ax, 3; // Сдвигаем вправо на 3 бита.
        mov bx, [esi]; // Копируем значение из массива в ebx. 
        and bx, 1110b; // Копируем значение битовых полей 3:1 в ebx. Маска: 0000 0000 0000 1110
        shl bx, 3; // Сдвигаем влево на 3 бита.
        and dx, 1111111110000001b; // Чистим битовые поля 6:1 в итоговом значении. Маска: 1111 1111 1000 0001
        or dx, bx; // Складываем итоговое значение с ebx. Ставим значения 3:1 на места 6:4
        or dx, ax; // Складываем итоговое значение с eax. Ставим значения 6:4 на места 3:1
        jmp NEXT;

    NEXT:
        mov[edi], dx; // Сохраняем полученное значение в массив С
        dec ecx; // Вычитаем одну итерацию из счетчика
        add esi, 2; // Переходим к следующему элементу массива А
        add edi, 2; // Переходим к следующему элементу массива С
        cmp ecx, 0; // Проверяем, есть ли еще элементы
        jne START; // Если есть еще элементы, переходим к следующей итерации
    }
    for (int i = 0; i < 6; ++i) {
        cout << "A[i]: " << bitset<16>(A[i]);
        printf("  %x", A[i]);
        cout << endl;
        cout << "C[i]: " << bitset<16>(C[i]);
        printf("  %x", C[i]);
        cout << endl;
        cout << endl;
    }
    return 0;
}
